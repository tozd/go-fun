# We prefer this order semantically, but in fact we
# run test and build jobs simultaneously.
stages:
  - test
  - build
  - deploy
  - sync

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  # We want full history so that "git describe" always works correctly.
  GIT_DEPTH: 0
  FF_ENABLE_BASH_EXIT_CODE_CHECK: "true"
  # We always want to run with the Go version installed in a Docker image.
  GOTOOLCHAIN: local
  DOCKER_PIPELINE_IMAGE_NAME: "$CI_REGISTRY_IMAGE/pipeline:$CI_PIPELINE_ID"
  DOCKER_DRIVER: overlay2
  DOCKER_BUILDKIT: "1"
  FF_NETWORK_PER_BUILD: 1
  PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic"

test:
  stage: test

  image: golang:$IMAGE_TAG

  tags:
    - saas-linux-2xlarge-amd64

  services:
    - name: ollama/ollama:0.5.11
      alias: ollama

  variables:
    OLLAMA_HOST: http://ollama:11434

  before_script:
    - apk --update add make bash gcc musl-dev
    - (cd /go; go install gotest.tools/gotestsum@v1.12.0)
    - (cd /go; go install github.com/boumenot/gocover-cobertura@v1.3.0)
    - go version

  script:
    - make test-ci

  artifacts:
    when: always
    reports:
      junit: tests.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - tests.xml
      - coverage.html
      - coverage.xml
    expire_in: never

  coverage: '/coverage: \d+\.\d+% of statements/'

  parallel:
    matrix:
      - IMAGE_TAG: ['1.23-alpine3.21', '1.24-alpine3.21']

  # We use a resource group to not hit rate limits when running multiple jobs in parallel (from potentially multiple pipelines).
  resource_group: llms

test_e2e:
  stage: test

  image: golang:$IMAGE_TAG

  tags:
    - saas-linux-medium-amd64

  services:
    - name: ollama/ollama:0.5.11
      alias: ollama

  variables:
    OLLAMA_HOST: http://ollama:11434

  before_script:
    - apk --update add make bash gcc musl-dev diffutils
    - go version

  script:
    - echo "$CONFIG" > config.json
    - go run ./cmd/fun extract --input testdata/exercises.json --output data --out=.txt 'exercises.#.{id:serial,data:text}'
    - go run ./cmd/fun call --input data --output results --provider "$PROVIDER" --config config.json --in .txt --out .txt --prompt testdata/prompt.txt --output-schema testdata/number-schema.json
    - ./testdata/compare.sh

  artifacts:
    when: always
    paths:
      - data
      - results
    expire_in: never

  parallel:
    matrix:
      - IMAGE_TAG: ['1.23-alpine3.21', '1.24-alpine3.21']
        PROVIDER: ollama
        CONFIG_NAME: llama3
        CONFIG: '{"model":"llama3:8b"}'
      - IMAGE_TAG: ['1.23-alpine3.21', '1.24-alpine3.21']
        PROVIDER: groq
        CONFIG_NAME: llama-3.3
        CONFIG: '{"model":"llama-3.3-70b-versatile"}'
      - IMAGE_TAG: ['1.23-alpine3.21', '1.24-alpine3.21']
        PROVIDER: anthropic
        CONFIG_NAME: claude-3-7-sonnet
        CONFIG: '{"model":"claude-3-7-sonnet-20250219","extendedThinkingBudget":32000}'
      - IMAGE_TAG: ['1.23-alpine3.21', '1.24-alpine3.21']
        PROVIDER: openai
        CONFIG_NAME: gpt-4o
        CONFIG: '{"model":"gpt-4o-2024-11-20"}'

  # We use a resource group to not hit rate limits when running multiple jobs in parallel (from potentially multiple pipelines).
  # TODO: Use a separate resource group for each provider so that these jobs can run in parallel.
  #       See: https://gitlab.com/gitlab-org/gitlab/-/issues/340417
  resource_group: llms

lint:
  stage: test

  image: golang:1.24-alpine3.21

  before_script:
    - apk --update add make bash gcc musl-dev
    - wget -O- -nv https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.64.5

  script:
    - make lint-ci

  artifacts:
    when: always
    reports:
      codequality: codeclimate.json
    expire_in: never

fmt:
  stage: test

  image: golang:1.24-alpine3.21

  before_script:
    - apk --update add make bash git gcc musl-dev grep
    - go install mvdan.cc/gofumpt@v0.7.0
    - go install golang.org/x/tools/cmd/goimports@v0.30.0

  script:
    - make fmt-ci

lint_docs:
  stage: test

  image: node:20.17-alpine3.20

  before_script:
    - apk --update add make bash git

  script:
    - make lint-docs-ci

audit:
  stage: test

  image: golang:1.24-alpine3.21

  before_script:
    - apk --update add make bash git gcc musl-dev
    - go install github.com/sonatype-nexus-community/nancy@v1.0.46

  script:
    - make audit

commits:
  stage: test

  image: golang:1.24-alpine3.21

  variables:
    GIT_DEPTH: "0"

  before_script:
    - apk --update add git

  script:
    - '! git log --oneline "-G^(<<<<<<<|=======|>>>>>>>)" | grep "^"'

docker:
  stage: build

  image: docker:23-git

  services:
    - docker:23-dind

  before_script:
    - docker info
    - echo "$CI_JOB_TOKEN" | docker login --username gitlab-ci-token --password-stdin "$CI_REGISTRY"

  script:
    - export BUILD_TIMESTAMP="$(date -u +%FT%TZ)"
    - echo BUILD_TIMESTAMP "$BUILD_TIMESTAMP"
    - export VERSION="$(git describe --tags --always --dirty=+)"
    - echo VERSION "$VERSION"
    - docker build
        --target production
        --tag "$DOCKER_PIPELINE_IMAGE_NAME"
        --tag "$CI_REGISTRY_IMAGE/commit:$CI_COMMIT_SHA"
        --build-arg BUILD_TIMESTAMP
        --label "org.opencontainers.image.version=$VERSION"
        --label "org.opencontainers.image.created=$BUILD_TIMESTAMP"
        --label "org.opencontainers.image.revision=$CI_COMMIT_SHA"
        --label "org.opencontainers.image.url=$CI_PROJECT_URL" .
    - docker build
        --target debug
        --tag "$DOCKER_PIPELINE_IMAGE_NAME-debug"
        --tag "$CI_REGISTRY_IMAGE/commit:$CI_COMMIT_SHA-debug"
        --build-arg BUILD_TIMESTAMP
        --label "org.opencontainers.image.version=$VERSION"
        --label "org.opencontainers.image.created=$BUILD_TIMESTAMP"
        --label "org.opencontainers.image.revision=$CI_COMMIT_SHA"
        --label "org.opencontainers.image.url=$CI_PROJECT_URL" .
    - docker push "$DOCKER_PIPELINE_IMAGE_NAME"
    - docker push "$CI_REGISTRY_IMAGE/commit:$CI_COMMIT_SHA"
    - docker push "$DOCKER_PIPELINE_IMAGE_NAME-debug"
    - docker push "$CI_REGISTRY_IMAGE/commit:$CI_COMMIT_SHA-debug"
    - export IMAGE_ID=$(docker create "$DOCKER_PIPELINE_IMAGE_NAME")
    - docker cp "$IMAGE_ID:/fun" fun-linux-amd64
    - docker rm "$IMAGE_ID"

  artifacts:
    expose_as: binaries
    name: binaries
    paths:
      - fun-linux-amd64
    expire_in: never

  # We want to run it as soon as possible and do not wait for test stage to finish.
  needs: []

push_branch:
  stage: deploy

  image: docker:23

  services:
    - docker:23-dind

  before_script:
    - docker info
    - echo "$CI_JOB_TOKEN" | docker login --username gitlab-ci-token --password-stdin "$CI_REGISTRY"

  # TODO: Improve so that pulling is not necessary. See: https://gitlab.com/gitlab-org/gitlab/-/issues/15252
  script:
    - docker pull "$DOCKER_PIPELINE_IMAGE_NAME"
    - docker tag "$DOCKER_PIPELINE_IMAGE_NAME" "$CI_REGISTRY_IMAGE/branch/$CI_COMMIT_REF_SLUG:latest"
    - docker tag "$DOCKER_PIPELINE_IMAGE_NAME" "$CI_REGISTRY_IMAGE/branch/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA"
    - docker pull "$DOCKER_PIPELINE_IMAGE_NAME-debug"
    - docker tag "$DOCKER_PIPELINE_IMAGE_NAME-debug" "$CI_REGISTRY_IMAGE/branch/$CI_COMMIT_REF_SLUG:latest-debug"
    - docker tag "$DOCKER_PIPELINE_IMAGE_NAME-debug" "$CI_REGISTRY_IMAGE/branch/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA-debug"
    - docker push "$CI_REGISTRY_IMAGE/branch/$CI_COMMIT_REF_SLUG:latest"
    - docker push "$CI_REGISTRY_IMAGE/branch/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA"
    - docker push "$CI_REGISTRY_IMAGE/branch/$CI_COMMIT_REF_SLUG:latest-debug"
    - docker push "$CI_REGISTRY_IMAGE/branch/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA-debug"

  rules:
    - if: $CI_COMMIT_BRANCH

  # We do not need build artifacts in this job.
  dependencies: []

push_tag:
  stage: deploy

  image: docker:23

  services:
    - docker:23-dind

  before_script:
    - docker info
    - echo "$CI_JOB_TOKEN" | docker login --username gitlab-ci-token --password-stdin "$CI_REGISTRY"

  # TODO: Improve so that pulling is not necessary. See: https://gitlab.com/gitlab-org/gitlab/-/issues/15252
  script:
    - docker pull "$DOCKER_PIPELINE_IMAGE_NAME"
    - docker tag "$DOCKER_PIPELINE_IMAGE_NAME" "$CI_REGISTRY_IMAGE/tag/$CI_COMMIT_REF_SLUG:latest"
    - docker tag "$DOCKER_PIPELINE_IMAGE_NAME" "$CI_REGISTRY_IMAGE/tag/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA"
    - docker pull "$DOCKER_PIPELINE_IMAGE_NAME-debug"
    - docker tag "$DOCKER_PIPELINE_IMAGE_NAME-debug" "$CI_REGISTRY_IMAGE/tag/$CI_COMMIT_REF_SLUG:latest-debug"
    - docker tag "$DOCKER_PIPELINE_IMAGE_NAME-debug" "$CI_REGISTRY_IMAGE/tag/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA-debug"
    - docker push "$CI_REGISTRY_IMAGE/tag/$CI_COMMIT_REF_SLUG:latest"
    - docker push "$CI_REGISTRY_IMAGE/tag/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA"
    - docker push "$CI_REGISTRY_IMAGE/tag/$CI_COMMIT_REF_SLUG:latest-debug"
    - docker push "$CI_REGISTRY_IMAGE/tag/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA-debug"

  rules:
    # Only on protected tags. Protected tags start with "v".
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_REF_NAME =~ /^v/'

  # We do not need build artifacts in this job.
  dependencies: []

upload_binaries:
  stage: deploy

  image: curlimages/curl:8.1.2

  script:
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file fun-linux-amd64 "$PACKAGE_REGISTRY_URL/linux-amd64/${CI_COMMIT_REF_NAME#v}/fun"'

  rules:
    # Only on protected tags. Protected tags start with "v".
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_REF_NAME =~ /^v/'

  dependencies:
    - docker

publish:
  stage: deploy

  image: golang:1.24-alpine3.21

  script:
    - GOPROXY=proxy.golang.org go list -m "gitlab.com/tozd/go/fun@$CI_COMMIT_REF_NAME"

  rules:
    # Only on protected tags on main repository. Protected tags start with "v".
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_REF_NAME =~ /^v/ && $CI_PROJECT_PATH == "tozd/go/fun"'

  # We do not need build artifacts in this job.
  dependencies: []

sync_releases:
  stage: sync

  image:
    name: registry.gitlab.com/tozd/gitlab/release/tag/v0-6-0:latest-debug
    entrypoint: [""]

  script:
    # On branch jobs, just update or remove releases, thus releases are created only on tag jobs.
    - /gitlab-release ${CI_COMMIT_BRANCH:+--no-create}

  rules:
    # Protected tags start with "v".
    - if: '$GITLAB_API_TOKEN && ($CI_COMMIT_BRANCH == "main" || ($CI_COMMIT_TAG && $CI_COMMIT_REF_NAME =~ /^v/))'

  # We do not need build artifacts in this job.
  dependencies: []

sync_config:
  stage: sync

  image:
    name: registry.gitlab.com/tozd/gitlab/config/tag/v0-5-0:latest-debug
    entrypoint: [""]

  script:
    - /gitlab-config set

  rules:
    - if: '$GITLAB_API_TOKEN && $SOPS_AGE_KEY_FILE && $CI_COMMIT_BRANCH == "main"'
      changes:
        - .gitlab-conf.yml

  # We do not need build artifacts in this job.
  dependencies: []
